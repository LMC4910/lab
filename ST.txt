1. ATM SYSTEM
import java.util.*;

public class Atm_ST {
	public static void main(String args[]){
		   Scanner sc=new Scanner(System.in);
		   int balance=10000, pin=1234, time=0, amount;
		   boolean deposit=true, flag=true, act=true;
		   
		   System.out.println("Welcome to The Himalayan Bank.\n");
		   
		   while(flag==true){
		   System.out.println("Enter Pin Number: ");
		   int userpin=sc.nextInt();
		   
		   if(userpin==pin){
			   
			while(act==true){
		   System.out.println("Enter the Account type: \n1-Savings\n2-Current\n");
		   int actype=sc.nextInt();
		   
		   if(actype!=1 && actype!=2)
			   {System.out.println("Invalid Account Type");
		   	   System.out.println("Do you want to try again? 1-Yes  2-No");
		   	   int c=sc.nextInt();
			   if(c==1) act=true;
			   else act=false;
			   }
		   else{
		   System.out.println("Press 1 for Withdrawal\nPress 2 for Deposition");
		   int x=sc.nextInt();
		   while(x==1){
			   System.out.println("Enter the amount to be withdrawn.  ");
			   amount=sc.nextInt();
			   if(amount>balance) 
				   {
	 System.out.println("Account balance is           lesser than withdrawal amount.");
				   System.out.println("Do you want to try again? 1-Yes  2-No");
				   int ch=sc.nextInt();
				   if(ch==1) x=1;
				   else x=0;
				   System.out.println("\n");
				   }
			   else {
				   System.out.println("Transaction is successful.");
 				   System.out.println("Available balance is: "+(balance-amount)+"\n\n");
				   x=0;
				   act=false;
			   }
		   }
		   if(x==2){
			   System.out.println("Kindly place the amount in the ATM.");
			   if(deposit==true) System.out.println("Transaction is successful.");
			   else System.out.println("Transaction is unsuccessful.");
			   act=false;
		   }}
		   flag=false;
		   } 
			}
		   else{
			if(time<3)System.out.println("Invalid pin. Please enter correct pin.\n\n");
			   if(time==3) flag=false;
			   time++;
		   }
		   }
	}
}




2. Triangle Problem

import java.util.Scanner;
public class triangle {
	public static void main(String[] args){
		Scanner s=new Scanner(System.in);
		int O=1;
		do{
			System.out.println("Enter 3 inputs which are the sides of a triangle");
			int a=s.nextInt();
			int b=s.nextInt();
			int c=s.nextInt();
			if(a<=200 && b<=200 && c<=200 && a>=1 && b>=1 && c>=1)
			{
				if(a<b+c && b<a+c && c<a+b){
					
				if(a==b && b==c)
				{
					System.out.println("It is an equilateral triangle\n");
				}
				else if(a==b||b==c||c==a)
				{
					System.out.println("It is an isoceles triangle\n");
					
				}
				else
				{
					System.out.println("It is a scalene triangle\n");
				}
			}
			else
				System.out.println("It is not a triangle\n");
			}
		else
			System.out.println("Invalid input\nEnter sides within the range 1-200\n");
		System.out.println("1. To enter input\n 2.to exit\nEnter your choice ");
		O=s.nextInt();
	}while(O!=2);
	s.close();
}
}






3. Eclema Triangle


*JAVA CODE

package cs067;


public class triangle {
	public String op(int a,int b,int c)
	{
		if(a>=1 && a<=200 && b>=1 && b<=200 && c>=1 && c<=200)
		{
			if(a+b>c && b+c>a && c+a>b)
			{
				if(a==b && b==c)
				{
					return "Equilateral Triangle";
				}
				else if(a==b||b==c)
				{
					return "Isosceles Triangle";
				}
				else
				{
					return "Scalen Triangle";
				}
			}
			else
			{
				return "Not a Triangle";
			}
		}
		else
		{
			return "Invalid";
		}
	}
}
			
*Junit code

package cs067;
import static org.junit.Assert.*;
import org.junit.Test;
import cs067.triangle;


public class triangleTest {
@Test
	public void test() {
		triangle t1=new triangle();
		assertEquals(t1.op(1, 2, 3),"Not a Triangle");
	}
	@Test
	public void test12() {
		triangle t1=new triangle();
		assertEquals(t1.op(2, 1, 1),"Not a Triangle");
	}
	@Test
	public void test13() {
		triangle t1=new triangle();
		assertEquals(t1.op(2, 4, 2),"Not a Triangle");
	}


	@Test
	public void test1() {
		triangle t1=new triangle();
		assertEquals(t1.op(100, 100, 100),"Equilateral Triangle");
	}
	@Test
	public void test2() {
		triangle t1=new triangle();
		assertEquals(t1.op(4, 5, 6),"Scalen Triangle");
	}
	@Test
	public void test3() {
		triangle t1=new triangle();
		assertEquals(t1.op(4, 6, 6),"Isosceles Triangle");
	}
	@Test
	public void test4() {
		triangle t1=new triangle();
		assertEquals(t1.op(201, 201, 201),"Invalid");
	}
	@Test
	public void test5() {
		triangle t1=new triangle();
		assertEquals(t1.op(6, 6, 4),"Isosceles Triangle");
	}
	@Test
	public void test6() {
		triangle t1=new triangle();
		assertEquals(t1.op(4, 201, 7),"Invalid");
	}
	@Test
	public void test7() {
		triangle t1=new triangle();
		assertEquals(t1.op(4, 7, 201),"Invalid");
	}
	@Test
	public void test8() {
		triangle t1=new triangle();
		assertEquals(t1.op(0, 7, 201),"Invalid");
	}
	@Test
	public void test9() {
		triangle t1=new triangle();
		assertEquals(t1.op(7, 0, 201),"Invalid");
	}
	@Test
	public void test11() {
		triangle t1=new triangle();
		assertEquals(t1.op(7, 9, 0),"Invalid");
	}

}









4. Box Testing Technique using Eclemma

*JAVA CODE
public class nextdate {

	public static String next(int d,int m,int  y,int cc){
		if(d==cc){
			d=1;
			if(m==12){
				y++;
				m=1;
			}
			else{
				m++;
			}
		}
		else {
			d++;
		}
		
		return(String.valueOf(d)+"/"+String.valueOf(m)+"/"+String.valueOf(y));
	}
	public String nextday(int d,int m,int y){
		if(d>=1 && d<=31 && m>=1 && m<=12 && y>=1812 && y<=2012){
			switch(m){
			case 1:
			case 3:
			case 5:
			case 8:
			case 10:
			case 12:return(next(d,m,y,31));
			case 4:
			case 6:
			case 9:
			case 11:return(next(d,m,y,30));
			default:return(next(d,m,y,((y%4==0 && y%100!=0) || y%400==0)?29:28));
			}
		}
		return "Invalid inputs";
	}

}

*Junit Code
import static org.junit.Assert.*;
import org.junit.Test;



public class test {

	//weak and strong normal test cases
		@Test
		public void test1() 
		{
			nextdate d1 = new nextdate();
			assertEquals(d1.nextday(15,3,1912),"16/3/1912");
		}
		@Test
		public void test2() 
		{
			nextdate d1 = new nextdate();
			assertEquals(d1.nextday(15,4,1912),"16/4/1912");
		}
		@Test
		public void test3() 
		{
			nextdate d1 = new nextdate();
			assertEquals(d1.nextday(16,4,1912),"17/4/1912");
		}
		@Test
		public void test4() 
		{
			nextdate d1 = new nextdate();
			assertEquals(d1.nextday(15,3,1912),"16/3/1912");
		}
		@Test
		public void test5() 
		{
			nextdate d1 = new nextdate();
			assertEquals(d1.nextday(10,11,1920),"11/11/1920");
		}
	
		@Test
		public void test6() 
		{
			nextdate d1 = new nextdate();
			assertEquals(d1.nextday(13,15,1912),"Invalid inputs");
		}
		@Test
		public void test7() 
		{
			nextdate d1 = new nextdate();
			assertEquals(d1.nextday(32,1,1813),"Invalid inputs");
		}
		@Test
		public void test8() 
		{
			nextdate d1 = new nextdate();
			assertEquals(d1.nextday(7,1,1810),"Invalid inputs");
		}
		
		@Test
		public void test9() 
		{
			nextdate d1 = new nextdate();
			assertEquals(d1.nextday(7,10,1912),"8/10/1912");
		}
		@Test
		public void test10() 
		{
			nextdate d1 = new nextdate();
			assertEquals(d1.nextday(6,11,2011),"7/11/2011");
		}
		@Test
		public void test11() 
		{
			nextdate d1 = new nextdate();
			assertEquals(d1.nextday(18,8,2012),"19/8/2012");
		}
		

		@Test
		public void test12() 
		{
			nextdate d1 = new nextdate();
			assertEquals(d1.nextday(-1,15,1912),"Invalid inputs");
		}
		@Test
		public void test13()                                                                                                          
		{
			nextdate d1 = new nextdate();
			assertEquals(d1.nextday(6,-1,1810),"Invalid inputs");
		}
		@Test
		public void test14() 
		{
			nextdate d1 = new nextdate();
			assertEquals(d1.nextday(32,10,1811),"Invalid inputs");
		}
		@Test
		public void test15() 
		{
			nextdate d1 = new nextdate();
			assertEquals(d1.nextday(1,2,1912),"2/2/1912");
		}
		@Test
		public void test16() 
		{
			nextdate d1 = new nextdate();
			assertEquals(d1.nextday(5,6,2000),"6/6/2000");
		}
		@Test
		public void test17() 
		{
			nextdate d1 = new nextdate();
			assertEquals(d1.nextday(21,6,2000),"22/6/2000");
		}
		@Test
		public void test18() 
		{
			nextdate d1 = new nextdate();
			assertEquals(d1.nextday(-1,-1,-1),"Invalid inputs");
		}
		@Test
		public void test19() 
		{
			nextdate d1 = new nextdate();
			assertEquals(d1.nextday(31,1,2001),"1/2/2001");
		}
		@Test
		public void test20() 
		{
			nextdate d1 = new nextdate();
			assertEquals(d1.nextday(31,12,2001),"1/1/2002");
		}
		@Test
		public void test21() 
		{
			nextdate d1 = new nextdate();
			assertEquals(d1.nextday(0,0,2013),"Invalid inputs");
		
	}
		@Test
		public void test22() 
		{
			nextdate d1 = new nextdate();
			assertEquals(d1.nextday(28,2,2011),"1/3/2011");
		}
		@Test
		public void test23() 
		{
			nextdate d1 = new nextdate();
			assertEquals(d1.nextday(28,13,2012),"Invalid inputs");
		}
		@Test
		public void test24() 
		{
			nextdate d1 = new nextdate();
			assertEquals(d1.nextday(28,2,2012),"29/2/2012");
		}
		@Test
		public void test25() 
		{
			nextdate d1 = new nextdate();
			assertEquals(d1.nextday(28,2,2000),"29/2/2000");
		}
		@Test
		public void test26() 
		{
			nextdate d1 = new nextdate();
			assertEquals(d1.nextday(31,1,1812),"1/2/1812");
		}
		@Test
		public void test27() 
		{
			nextdate d1 = new nextdate();
			assertEquals(d1.nextday(31,12,2012),"1/1/2013");
		}

}








5.Write a test program to list the total number of objects present on a web page

JAVA SCRIPT

import org.openqa.selenium.By;
import org.openqa.selenium.chrome.ChromeDriver;

public class Demo1 {
		public static void main(String[] args)
{
			System.setProperty("webdriver.chrome.driver", 
                                    C:\\Users\\User\\Downloads\\chromedriver.exe");
			ChromeDriver driver = new ChromeDriver();
	             	driver.get("http://www.newtours.demoaut.com");        
	          		driver.manage().window().maximize();
			driver.findElement(By.name("userName")).sendKeys("mercury");
			driver.findElement(By.name("password")).sendKeys("mercury");
			driver.findElement(By.name("login")).click();
			}
                                  }
		        





6.DEMONSTRATION OF SELENIUM IDE & WEBDRIVER FOR CONDUCTING TEST ON WEBSITE(S)


package ex9;
import org.openqa.selenium.By;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.WebElement;
import java.util.List;

public class links {
public static void main(String[] args){
System.setProperty("webdriver.chrome.driver","C:\\Users\\Student\\Downloads\\chromedriver_win32 (1)\\chromedriver.exe");
ChromeDriver d=new ChromeDriver();
d.get("C:\\Users\\Student\\Desktop\\image.html");
List <WebElement> a=d.findElements(By.xpath("//select"));
int linkcount=a.size();
System.out.println("total no of links ="+linkcount);

List <WebElement> b=d.findElements(By.xpath("//*"));
int elements=b.size();
System.out.println("total no of elements ="+elements);

}

}




7.Write a test program to demonstrate URL and title check point



package progten;
import org.openqa.selenium.chrome.ChromeDriver;
public class gourav_1NH18CS067{
public static void main(String[] args) {
System.setProperty("webdriver.chrome.driver","C:\\\\Users\\\\Student\\\\Desktop\\\\Jar\\\\chromedriver.exe");
ChromeDriver driver = new ChromeDriver();
driver.get("https://en.wikipedia.org/wiki/Wikipedia");
driver.manage().window().maximize();
driver.findElementById("pt-login").click();
String str=driver.getCurrentUrl();
System.out.println("Url of current webpage is '"+str+"'");
if(str.equals("https://en.wikipedia.org/w/index.php?title=Special:UserLogin&returnto=Wikipedia"))
System.out.println(true);
else
System.out.println(false);
ChromeDriver d = new ChromeDriver();
d.get("C:\\Users\\Student\\Desktop\\login.html");
d.manage().window().maximize();

String s=d.getTitle();
System.out.println("Title of current webpage is '"+s+"'");
if(s.equals("LOGIN"))
System.out.println(true);
else
System.out.println(false);
}
}



8.Write a test program to demonstrate selecting and deselecting option from multi select dropdown

package seledriver;

import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.Select;

public class dropdown3 {

    public static void main(String[] args) throws InterruptedException {
    	
    	//pgm 11_Write a test program to demonstrate selecting and 
    	//deselecting option from multi select dropdown

        //Creating instance of Chrome driver
    	System.setProperty("webdriver.chrome.driver", 
    			"D:\\Software\\Eclipse&JAR\\Jar\\chromedriver_win32\\chromedriver.exe");
	             WebDriver driver = new ChromeDriver();

        // Navigate to the URL
        driver.get("https://demoqa.com/select-menu");
	             //driver.get("file:///D:/NHCE/academic%20files/Academic%20files%20ODD%2021-22/ST/st%20lab/LAB-Checked/dropdown.html");
        //Maximizing window
        driver.manage().window().maximize();

        //Selecting the multi-select element by locating its id
        Select select = new Select(driver.findElement(By.id("cars")));

        //Get the list of all the options
        System.out.println("The dropdown options are -");

        List<WebElement> options = select.getOptions();

        for(WebElement option: options)
            System.out.println(option.getText());

        //Using isMultiple() method to verify if the element is multi-select, 
        //if yes go onto next steps else exit
        if(select.isMultiple()){

            //Selecting option as 'Opel'-- ByIndex
            System.out.println("Select option Opel by Index");
            select.selectByIndex(2);
            Thread.sleep(5000);

            //Selecting the option as 'Saab'-- ByValue
            System.out.println("Select option saab by Value");
            select.selectByValue("saab");
            Thread.sleep(5000);

            // Selecting the option by text
            System.out.println("Select option Audi by Text");
            select.selectByVisibleText("Audi");
            Thread.sleep(5000);

            //Get the list of selected options
            System.out.println("The selected values in the dropdown options are -");

            List<WebElement> selectedOptions = select.getAllSelectedOptions();

            for(WebElement selectedOption: selectedOptions)
                System.out.println(selectedOption.getText());


            // Deselect the value "Audi" by Index
            System.out.println("DeSelect option Audi by Index");
            select.deselectByIndex(3);
            Thread.sleep(10000);

            //Deselect the value "Opel" by visible text
            System.out.println("Select option Opel by Text");
            select.deselectByVisibleText("Opel");
            //Thread.sleep(10000);

            //Validate that both the values are deselected
            System.out.println("The selected values after deselect in the dropdown options are -");
            List<WebElement> selectedOptionsAfterDeselect = select.getAllSelectedOptions();

            for(WebElement selectedOptionAfterDeselect: selectedOptionsAfterDeselect)
                System.out.println(selectedOptionAfterDeselect.getText());

            //Step#8- Deselect all values
            select.deselectAll();
        }

        driver.quit();
    }

}








9. Synchronization 


IMPLICIT
package seledriver;
import java.util.concurrent.TimeUnit;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
//import org.testng.annotations.Test;
public class Implicit12_final {
	public static void main(String[] args) throws InterruptedException {
		System.setProperty ("webdriver.chrome.driver",
				"D:\\Software\\Eclipse&JAR\\Jar\\chromedriver_win32\\chromedriver.exe" );
		ChromeDriver driver = new ChromeDriver();
	driver.manage().timeouts().implicitlyWait(10,TimeUnit.MINUTES) ;
	String eTitle = "Demo Guru99 Page";
	String aTitle = "" ;
	// launch Chrome and redirect it to the Base URL
	driver.get("http://demo.guru99.com/test/guru99home/" );
	//Maximizes the browser window
	driver.manage().window().maximize() ;
	//get the actual value of the title
	aTitle = driver.getTitle();
	//compare the actual title with the expected title
	if (aTitle.equals(eTitle))
	{
	System.out.println( "Test Passed") ;
	}
	else {
	System.out.println( "Test Failed" );
	}
	//close browser
	driver.close();
}
}

EXPLICIT

Package seledriver;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
public class Explicit12_final {
	public static void main(String[] args) throws InterruptedException {
	System.setProperty ("webdriver.chrome.driver",
			"D:\\Software\\Eclipse&JAR\\Jar\\chromedriver_win32\\chromedriver.exe" );
	ChromeDriver driver = new ChromeDriver();
	WebDriverWait wait=new WebDriverWait(driver, 10);
	String eTitle = "Demo Guru99 Page";
	String aTitle = "" ;
	// launch Chrome and redirect it to the Base URL
	driver.get("http://demo.guru99.com/test/guru99home/" );
	//Maximizes the browser window
	driver.manage().window().maximize() ;
	//get the actual value of the title
	aTitle = driver.getTitle();
	//compare the actual title with the expected title
	if (aTitle.contentEquals(eTitle))
	{
	System.out.println( "Test Passed") ;
	}
	else {
	System.out.println( "Test Failed" );
	}
	//driver.close();
	WebElement guru99=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath( "//a")));
	guru99.click();
	
	}
	
}



10. BOUNDARY VALUE ANALYSIS (BVA) FOR NEXTDATE FUNCTION

JAVA CODE

import java.util.*;
public class Next {

	public  String nextd(int day,int month, int year) {
		
		if((month>12)||((year<1812)||(year>2020))||(day>31))
		{
			return("Enter valid dates");
		} 
		else
		{
			if((day==31 && month%2!=1 && month<8)||(day==31 && month>7 && month%2==1))
			{
				return("Enter valid dates");
			}
			else
			{
			
				if((month%2==1)||((month>7)&&(month%2==0)))
				{
					if(day==31)
					{
						if(month==12){
							day=1;
							month=1;
							year+=1;
						}
						else
						{
						day=1;
						month+=1;
						}
					}
					else
					{
						day+=1;
					}
				}
				else
				{
					if(month==2 && day==28)
					{
						if((year%4==0 && year%100!=0)||(year%400==0))
						{
							day+=1;
						}
						else
						{
							month+=1;
							day=1;
						}
					}
					else if(day==30)
					{
						if(month==12){
							day=1;
							month=1;
							year+=1;
						}
						else
						{
						day=1;
						month+=1;
						}
					}
					else
					{
						day+=1;
					}
				}
			}
		}
		return(day+"/"+month+"/"+year);

	}

}

Junit Code

*Normal BVA

import static org.junit.Assert.*;
import org.junit.Test;
public class Normalbva {
	@Test
	public void test1() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(12,3,1812),"13/3/1812");
	}
	@Test
	public void test2() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(30,3,1813),"31/3/1813");
	}
	
@Test
	public void test3() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(31,12,1912),"1/1/1913");
	}
	
	@Test
	public void test4() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(12,3,2019),"13/3/2019");
	}
	@Test
	public void test5() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(12,3,2020),"13/3/2020");
	}
	@Test
	public void test6() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(15,1,2020),"16/1/2020");
	}
	@Test
	public void test7() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(15,2,2020),"16/2/2020");
	}
	@Test
	public void test8() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(15,11,2020),"16/11/2020");
	}
	@Test
	public void test9() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(15,12,2020),"16/12/2020");
	}
	@Test
	public void test10() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(15,6,2020),"16/6/2020");
	}
	@Test
	public void test11() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(1,6,2020),"2/6/2020");
	}
	@Test
	public void test12() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(2,6,2020),"3/6/2020");
	}
	@Test
	public void test13() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(15,6,2020),"16/6/2020");
	}
	
	@Test
	public void test14() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(30,6,2020),"1/7/2020");
	}
	@Test
	public void test15() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(31,3,2020),"1/4/2020");
	}

}

*Robust BVA


import static org.junit.Assert.*;
import org.junit.Test;
public class robustbva {

	@Test
	public void test() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(25,3,2019),"26/3/2019");
	}

	@Test
	public void test1() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(12,3,1950),"13/3/1950");
	}
	@Test
	public void test3() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(31,12,1915),"1/1/1916");
	}
	
	@Test
	public void test6() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(12,3,1915),"13/3/1915");
	}
	
	@Test
	public void test4() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(32,3,1914),"Enter valid dates");
	}
	@Test
	public void test5() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(12,13,2021),"Enter valid dates");
	}
	

	@Test
	public void test7() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(12,3,2020),"13/3/2020");
	}

}

*Worst-case BVA

import static org.junit.Assert.*;
import org.junit.Test;
public class worstcase {

	@Test
	public void test() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(25,3,2012),"26/3/2012");
	}

	@Test
	public void test1() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(12,3,1925),"13/3/1925");
	}
	@Test
	public void test2() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(30,3,1950),"31/3/1950");
	}
	@Test
	public void test3() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(31,12,2010),"1/1/2011");
	}
	public void test4() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(31,12,2010),"1/1/2010");
	}
	public void test5() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(31,12,2010),"1/1/2010");
	}
	
	@Test
	public void test6() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(12,3,1915),"13/3/1915");
	}
	@Test
	public void test7() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(12,3,1920),"13/3/1920");
	}
	@Test
	public void test8() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(31,12,2009),"1/1/2010");
	}
	@Test
	public void test9() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(31,12,2000),"1/1/2001");
	}


}







*Robust worst-case BVA

import static org.junit.Assert.*;

import org.junit.Test;

public class robustworstcase {

	@Test
	public void test() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(25,3,2012),"26/3/2012");
	}

	@Test
	public void test1() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(12,3,1925),"13/3/1925");
	}
	@Test
	public void test2() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(30,3,1950),"31/3/1950");
	}
	@Test
	public void test3() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(31,12,2010),"1/1/2011");
	}
	public void test4() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(31,12,2010),"1/1/2010");
	}
	public void test5() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(31,12,2010),"1/1/2010");
	}
	
	@Test
	public void test6() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(12,3,1915),"13/3/1915");
	}
	@Test
	public void test7() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(12,3,1920),"13/3/1920");
	}
	@Test
	public void test8() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(31,12,2009),"1/1/2010");
	}
	@Test
	public void test9() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(31,12,2000),"1/1/2001");
	}
	public void test12() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(31,12,2019),"1/1/2020");
	}
	@Test
	public void test13() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(31,12,1999),"1/1/2000");
	}
	@Test
	public void test10() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(32,3,1914),"Enter valid dates");
	}
	@Test
	public void test11() 
	{
		Next d1 = new Next();
		assertEquals(d1.nextd(12,13,2021),"Enter valid dates");
	}


}




11.EQUIVALENCE CLASS PARTITIONING (ECP) FOR NEXTDATE FUNCTION


*JAVA CODE

package nd2;

//import java.util.Scanner;

public class nextdate
{
	public static String next(int d, int m, int y, int cc)
	{
		if(d==cc)
		{
			d=1;
			if(m==12)
			{
				y++;
				m=1;
			}
			else
			{
				m++;
			}
		}
		else
		{
			d++;
		}
		
		return(String.valueOf(d)+"/"+String.valueOf(m)+"/"+String.valueOf(y));
	}
	public String nextday(int d, int m, int y)
	{
		if(d>=1 && d<=31 && m>=1 && m<=12 && y>=1812 && y<=2012)
		{
			switch(m)
			{
			case 1: 
			case 3:return(next(d,m,y,31));
			case 5:return(next(d,m,y,31));
			case 7:return(next(d,m,y,31));
			case 8:return(next(d,m,y,31));
			case 10:return(next(d,m,y,31));
			case 12: return(next(d,m,y,31));
			case 4: return(next(d,m,y,30));
			case 6: return(next(d,m,y,30));
			case 9: return(next(d,m,y,30));
			case 11: return(next(d,m,y,30));
			default: return(next(d,m,y,((y%4==0 && y%100!=0) || y%400==0)?29:28));
			}
		}
		return "Invalid Values";
	}
 
}

*Junit code
package nd2;

import static org.junit.Assert.*;

import org.junit.Test;

public class equind2pgm {

	//weak and strong normal test case
	@Test
	
	public void test_1() 
	{
		nextdate ob1=new nextdate();
		assertEquals(ob1.nextday(15,6,1912),"16/6/1912");
	}
	
	@Test
	public void test_2() 
	{
		nextdate ob1=new nextdate();
		assertEquals(ob1.nextday(10,6,1912),"11/6/1912");
	}
	@Test
	public void test_3() 
	{
		nextdate ob1=new nextdate();
		assertEquals(ob1.nextday(10,6,1900),"11/6/1900");
	}
	
	@Test
	public void test_4() 
	{
		nextdate ob1=new nextdate();
		assertEquals(ob1.nextday(10,5,1912),"11/5/1912");
	}
	
	@Test
	public void test_5() 
	{
		nextdate ob1=new nextdate();
		assertEquals(ob1.nextday(20,10,2010),"21/10/2010");
	} 
	
	//weak robust test cases
 
	@Test
	public void test3() 
	{
		nextdate ob1=new nextdate();
		assertEquals(ob1.nextday(-1,10,1912),"Invalid Values");
	}

	@Test
	public void test31() 
	{
		nextdate ob1=new nextdate();
		assertEquals(ob1.nextday(12,7,1912),"13/7/1912");
	}
	@Test
	public void test32() 
	{
		nextdate ob1=new nextdate();
		assertEquals(ob1.nextday(12,8,1912),"13/8/1912");
	}
	@Test
	public void test33() 
	{
		nextdate ob1=new nextdate();
		assertEquals(ob1.nextday(12,4,1912),"13/4/1912");
	}
	@Test
	public void test34() 
	{
		nextdate ob1=new nextdate();
		assertEquals(ob1.nextday(12,9,1912),"13/9/1912");
	}
	@Test
	public void test35() 
	{
		nextdate ob1=new nextdate();
		assertEquals(ob1.nextday(12,1,1912),"13/1/1912");
	}
	@Test
	public void test36() 
	{
		nextdate ob1=new nextdate();
		assertEquals(ob1.nextday(12,2,1912),"13/2/1912");
	}
	@Test
	public void test37() 
	{
		nextdate ob1=new nextdate();
		assertEquals(ob1.nextday(12,3,1912),"13/3/1912");
	}
	@Test
	public void test30() 
	{
		nextdate ob1=new nextdate();
		assertEquals(ob1.nextday(10,3,1912),"11/3/1912");
	}
	@Test
	public void test4() 
	{
		nextdate ob1=new nextdate();
		assertEquals(ob1.nextday(15,13,1912),"Invalid Values");
	}
	@Test
	public void test5() 
	{
		nextdate ob1=new nextdate();
		assertEquals(ob1.nextday(1,6,2200),"Invalid Values");
	}
	@Test
	public void test6() 
	{
		nextdate ob1=new nextdate();
		assertEquals(ob1.nextday(32,6,1912),"Invalid Values");
	}
	@Test
	public void test7() 
	{
		nextdate ob1=new nextdate();
		assertEquals(ob1.nextday(15,6,1811),"Invalid Values");
	}
	@Test
	public void test8() 
	{
		nextdate ob1=new nextdate();
		assertEquals(ob1.nextday(15,6,2013),"Invalid Values");
	}
	
	//strong robust test cases
	@Test
	public void test9() 
	{
		nextdate ob1=new nextdate();
		assertEquals(ob1.nextday(2,1,1912),"3/1/1912");
	}
	@Test
	public void test10() 
	{
		nextdate ob1=new nextdate();
		assertEquals(ob1.nextday(-1,3,1900),"Invalid Values");
	}
	@Test
	public void test11() 
	{
		nextdate ob1=new nextdate();
		assertEquals(ob1.nextday(15,0,1811),"Invalid Values");
	}
	@Test
	public void test12() 
	{
		nextdate ob1=new nextdate();
		assertEquals(ob1.nextday(33,12,1912),"Invalid Values");
	}
	@Test
	public void test13() 
	{
		nextdate ob1=new nextdate();
		assertEquals(ob1.nextday(15,-1,-1),"Invalid Values");
	}
	@Test
	public void test14() 
	{
		nextdate ob1=new nextdate();
		assertEquals(ob1.nextday(-1,6,-1),"Invalid Values");
	}
	@Test
	public void test15() 
	{
		nextdate ob1=new nextdate();
		assertEquals(ob1.nextday(-1,-1,-1),"Invalid Values");
	}
	@Test
	public void test16() 
	{
		nextdate ob1=new nextdate();
		assertEquals(ob1.nextday(31,12,2010),"1/1/2011");
	}
	@Test
	public void test17() 
	{
		nextdate ob1=new nextdate();
		assertEquals(ob1.nextday(30,11,2010),"1/12/2010");
	}
	
	//////leap
	@Test
	public void test18() 
	{
		nextdate ob1=new nextdate();
		assertEquals(ob1.nextday(3,2,2010),"4/2/2010");
	}

	@Test
	public void test19() 
	{
		nextdate ob1=new nextdate();
		assertEquals(ob1.nextday(28,2,2010),"1/3/2010");
	}
	@Test
	public void test20() 
	{
		nextdate ob1=new nextdate();
		assertEquals(ob1.nextday(20,2,2008),"21/2/2008");
	}
	@Test
	public void test21() 
	{
		nextdate ob1=new nextdate();
		assertEquals(ob1.nextday(29,2,2000),"1/3/2000");
	}
	@Test
	
	public void test22() 
	{
		nextdate ob1=new nextdate();
		assertEquals(ob1.nextday(28,2,1900),"1/3/1900");
	}

}
